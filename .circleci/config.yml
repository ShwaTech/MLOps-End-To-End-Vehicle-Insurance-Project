version: 2.1

# Reusable commands for better maintainability
commands:
  setup-aws-auth:
    description: "Configure AWS authentication"
    parameters:
      aws-access-key-id:
        type: string
      aws-secret-access-key:
        type: string
      aws-region:
        type: string
    steps:
    - run:
        name: Configure AWS credentials
        command: |
          mkdir -p ~/.aws
          cat > ~/.aws/config << EOF
          [default]
          region = << parameters.aws-region >>
          EOF
          cat > ~/.aws/credentials << EOF
          [default]
          aws_access_key_id = << parameters.aws-access-key-id >>
          aws_secret_access_key = << parameters.aws-secret-access-key >>
          EOF

  ecr-login:
    description: "Login to Amazon ECR"
    steps:
    - run:
        name: Login to Amazon ECR
        command: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

  build-push-ecr:
    description: "Build, tag and push Docker image to ECR"
    parameters:
      ecr-repository:
        type: string
      image-tag:
        type: string
        default: "latest"
    steps:
    - run:
        name: Build, tag, and push image to Amazon ECR
        command: |
          docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/<< parameters.ecr-repository >>:<< parameters.image-tag >> .
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/<< parameters.ecr-repository >>:<< parameters.image-tag >>

# Reusable executors
executors:
  linux-aws:
    docker:
    - image: cimg/base:current
    environment:
      AWS_REGION: << pipeline.parameters.aws-region >>
      AWS_ACCOUNT_ID: << pipeline.parameters.aws-account-id >>

  self-hosted-runner:
    machine:
      enabled: true

# Pipeline parameters for configuration
parameters:
  aws-region:
    type: string
    default: "us-east-1"
  aws-account-id:
    type: string
    default: ""

jobs:
  continuous-integration:
    executor: linux-aws
    steps:
    - checkout

    - setup-aws-auth:
        aws-access-key-id: << pipeline.parameters.aws-access-key-id >>
        aws-secret-access-key: << pipeline.parameters.aws-secret-access-key >>
        aws-region: << pipeline.parameters.aws-region >>

    - ecr-login

    - build-push-ecr:
        ecr-repository: << pipeline.parameters.ecr-repository >>
        image-tag: latest

    - persist_to_workspace:
        root: /tmp
        paths:
        - .aws

  continuous-deployment:
    executor: self-hosted-runner
    steps:
    - checkout

    - attach_workspace:
        at: /tmp

    - setup-aws-auth:
        aws-access-key-id: << pipeline.parameters.aws-access-key-id >>
        aws-secret-access-key: << pipeline.parameters.aws-secret-access-key >>
        aws-region: << pipeline.parameters.aws-region >>

    - ecr-login

    - run:
        name: Run Docker Image to serve users
        command: |
          docker run -d \
            -e AWS_ACCESS_KEY_ID=<< pipeline.parameters.aws-access-key-id >> \
            -e AWS_SECRET_ACCESS_KEY=<< pipeline.parameters.aws-secret-access-key >> \
            -e AWS_DEFAULT_REGION=<< pipeline.parameters.aws-region >> \
            -e MONGODB_URL=<< pipeline.parameters.mongodb-url >> \
            -p 5000:5000 \
            << pipeline.parameters.aws-account-id >>.dkr.ecr.<< pipeline.parameters.aws-region >>.amazonaws.com/<< pipeline.parameters.ecr-repository >>:latest

workflows:
  deploy-to-ec2:
    when:
      equal: [ main, << pipeline.git.branch >> ]
    jobs:
    - continuous-integration:
        context:
        - aws-creds
        post-steps:
        - store_artifacts:
            path: /tmp/.aws
            destination: aws-config
    - continuous-deployment:
        requires:
        - continuous-integration
        context:
        - aws-creds
