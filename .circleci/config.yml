version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@9.6.0
  aws-cli: circleci/aws-cli@5.4.1

jobs:
  # ----------------------------------------------------
  # Job 1: Continuous Integration (Build & Push to ECR)
  # ----------------------------------------------------
  continuous_integration:
    machine:
      image: ubuntu-2204:2023.10.1
    steps:
    - checkout

    # Get the AWS Account ID dynamically (instead of relying on CircleCI env)
    - run:
        name: Fetch AWS Account ID
        command: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "export AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $BASH_ENV
          echo "AWS Account ID is $AWS_ACCOUNT_ID"

    # Build & push Docker image to ECR
    - aws-ecr/build_and_push_image:
        auth:
        - aws-cli/setup
        account_id: "${AWS_ACCOUNT_ID}"
        region: "${AWS_DEFAULT_REGION}"
        repo: "${ECR_REPO}"
        tag: "latest"
        create_repo: false

  # ----------------------------------------------------
  # Job 2: Continuous Deployment (Pull & Run on target)
  # ----------------------------------------------------
  continuous_deployment:
    machine:
      image: ubuntu-2204:2024.01.1
    environment:
      ECR_REPOSITORY: $ECR_REPO
      IMAGE_TAG: latest
    steps:
    - checkout
    - aws-cli/setup
    - run:
        name: Pull and Run Application Docker Image
        command: |
          echo "Fetching AWS account ID..."
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)

          echo "Constructing ECR registry URL..."
          ECR_REGISTRY="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com"
          FULL_IMAGE_NAME="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

          echo "Logging into ECR..."
          aws ecr get-login-password --region $AWS_DEFAULT_REGION \
            | docker login --username AWS --password-stdin $ECR_REGISTRY

          echo "Pulling image: $FULL_IMAGE_NAME"
          docker pull $FULL_IMAGE_NAME

          echo "Stopping and removing old container..."
          docker stop my-app-container || true
          docker rm my-app-container || true

          echo "Running new container..."
          docker run -d \
            --name my-app-container \
            -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
            -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
            -e AWS_DEFAULT_REGION="$AWS_DEFAULT_REGION" \
            -e MONGODB_URL="$MONGODB_URL" \
            -p 5000:5000 \
            $FULL_IMAGE_NAME

# ----------------------------------------------------
# Workflow: Run CI then Deploy on main branch
# ----------------------------------------------------
workflows:
  deploy_on_push_main:
    jobs:
    - continuous_integration:
        filters:
          branches:
            only: main
    - continuous_deployment:
        requires:
        - continuous_integration
        filters:
          branches:
            only: main
