version: 2.1

# Define Orbs for easier AWS integration (ECR, CLI)
orbs:
  aws-ecr: circleci/aws-ecr@9.6.0
  aws-cli: circleci/aws-cli@5.1.0
  # NEW ORB: Required for connecting and running commands on the remote EC2 instance via SSH.
  ssh: circleci/ssh@2.1.0

jobs:
  # ----------------------------------------------------
  # Job 1: Continuous Integration (Build and Push)
  # ----------------------------------------------------
  continuous_integration:
    # Use a machine executor for Docker-in-Docker (needed for building/pushing images)
    machine:
      image: ubuntu-2204:2023.10.1

    steps:
    - checkout

    # Authentication is passed to the build_and_push_image command
    - aws-ecr/build_and_push_image:
        auth:
        - aws-cli/setup
        repo: ECR_REPO
        tag: 'latest'
        create-repo: false

  # ----------------------------------------------------
  # Job 2: Continuous Deployment (Run on EC2 Target via SSH)
  # ----------------------------------------------------
  continuous_deployment:
    # Switched to a standard Docker executor, as the actual heavy lifting (Docker deployment)
    # will now happen remotely on the EC2 instance.
    docker:
    - image: cimg/base:2023.10

    environment:
      # Define environment variables used in the remote script for clarity
      ECR_REPOSITORY: $ECR_REPO
      IMAGE_TAG: latest
      ECR_REGISTRY_URL: $AWS_ECR_REGISTRY_URL # Assuming this is set in your context/project

    steps:
    - checkout

    # 1. Setup AWS CLI for ECR Login credentials
    - aws-cli/setup

    # 2. Get ECR Login Token
    - aws-ecr/get-login-password:
        region: AWS_DEFAULT_REGION

    # 3. Setup SSH keys for connecting to the remote EC2
    # CRITICAL: Requires SSH_USERS, SSH_KEY_FINGERPRINTS, and SSH_ADDITIONAL_KEYS in a context or project
    - ssh/setup-keys:
        # Assuming you have set SSH_KEY_FINGERPRINTS in your project settings
        key_fingerprints: $SSH_KEY_FINGERPRINTS

    # 4. Deploy to the remote EC2 instance using SSH
    - run:
        name: Pull and Run Application Docker Image on EC2 Target
        command: |
          # Read ECR credentials from the temporary file created by aws-ecr/get-login-password
          ECR_PASSWORD=$(cat /tmp/ecr-login-password)
          FULL_IMAGE_NAME="$ECR_REGISTRY_URL/$ECR_REPOSITORY:$IMAGE_TAG"

          # Use the SSH command to execute the deployment script on the remote EC2 instance.
          # You must define EC2_USERNAME (e.g., 'ubuntu', 'ec2-user') and EC2_HOST (IP or DNS) 
          # as environment variables in CircleCI.
          ssh -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST << EOF

          # 1. Log into ECR on the remote machine
          echo "Logging into ECR remotely..."
          echo "$ECR_PASSWORD" | docker login --username AWS --password-stdin $ECR_REGISTRY_URL

          # 2. Pull the new image
          echo "Pulling image: $FULL_IMAGE_NAME"
          docker pull $FULL_IMAGE_NAME

          # 3. Stop and remove the old container
          echo "Stopping and removing old container..."
          docker stop my-app-container || true
          docker rm my-app-container || true

          # 4. Run the new container, passing necessary secrets
          echo "Running new container on port 5000..."
          # IMPORTANT: Environment variables (like MONGODB_URL) must be configured on the EC2 machine
          # or passed through the SSH command if needed.
          docker run -d \
            --name my-app-container \
            -e MONGODB_URL="$MONGODB_URL" \
            -p 5000:5000 \
            $FULL_IMAGE_NAME

          EOF

# ----------------------------------------------------
# Workflow: Define the sequence and dependencies of jobs
# ----------------------------------------------------
workflows:
  deploy_on_push_main:
    jobs:
    - continuous_integration:
        filters:
          branches:
            only: main

    - continuous_deployment:
        requires:
        - continuous_integration
        filters:
          branches:
            only: main
